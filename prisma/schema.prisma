// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Gratitude {
  id       String   @id @default(cuid())
  content  String
  typeface String   @default("sans")
  bg       String   @default("blue")
  fontSize String   @default("base")
  notify   Boolean?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  from         User   @relation("GratitudeFromUser", fields: [fromUserId], references: [id])
  fromUserId   String
  fromPosition Int[]
  to           User   @relation("GratitudeToUser", fields: [toUserId], references: [id])
  toUserId     String
  toPosition   Int[]
  tags         Tag[]

  @@map("gratitudes")
}

model Tag {
  id   String @id @default(cuid())
  name String @unique

  gratitudes Gratitude[]

  @@map("tags")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String      @id @default(cuid())
  firstname     String?
  lastname      String?
  name          String?
  username      String?     @unique
  email         String?     @unique
  bio           String?
  emailVerified DateTime?
  password      String?
  image         String?
  urls          String[]
  accounts      Account[]
  sessions      Session[]
  sent          Gratitude[] @relation("GratitudeFromUser")
  received      Gratitude[] @relation("GratitudeToUser")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}
